model User {
  id        String    @id @default(uuid()) // Use auto-generated UUID
  email     String    @unique
  username  String
  password  String
  firstName String
  lastName  String
  address   String
  // Use a more descriptive name for the relation
  accounts  Account[]

  // Use a better name for the relation
  mobileOTPSecrets MobileOTPSecret[]
}

model MobileOTPSecret {
  id     String @id @default(uuid())
  secret String
  userId String

  // Use a more meaningful name for the relation
  user User @relation(fields: [userId], references: [id])
}

model Account {
  id           Int           @id @default(autoincrement())
  userId       String
  debitCards   Debit[]
  creditCards  Credit[]
  transactions Transaction[]
  incidences   Incidence[]

  user User? @relation(fields: [userId], references: [id])
}

model Debit {
  id             Int    @id @default(autoincrement())
  userId         String @unique
  ATMPin         String @unique
  CardNumber     String @unique
  CVV            String @unique
  CardType       String
  CardIssuedDate String
  CardExpiryDate String
  CardHolderName String
  balance        Float
  savings        Float

  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?     @unique
}

model Credit {
  id           Int    @id @default(autoincrement())
  userId       String @unique
  pin          String @unique
  cardNumber   String @unique
  cvv          String @unique
  deposit      Float
  balanceInUse Float

  account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?
}

model Incidence {
  id              String @id @default(uuid())
  accountId       Int?
  message         String
  dateOfIncidence String

  account Account? @relation(fields: [accountId], references: [id])
}

model Transaction {
  id                String @id @default(uuid())
  amountTransacted  Float
  senderId          Int?
  receiver          String
  dateOfTransaction String
  feesApplied       Float

  sender Account? @relation(fields: [senderId], references: [id])
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
